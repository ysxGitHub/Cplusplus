/*
一、两种思路
    1、第一种思路模板是一个一维的 dp 数组：

        int n = array.length;
        int[] dp = new int[n];

        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                dp[i] = 最值(dp[i], dp[j] + ...)
            }
        }

举个我们写过的例子 最长递增子序列，在这个思路中 dp 数组的定义是：

在子数组array[0..i]中，以array[i]结尾的目标子序列（最长递增子序列）的长度是dp[i]

    2、第二种思路模板是一个二维的 dp 数组：

        int n = arr.length;
        int[][] dp = new dp[n][n];

        for (int i = 0; i < n; i++) {
            for (int j = 1; j < n; j++) {
                if (arr[i] == arr[j]) 
                    dp[i][j] = dp[i][j] + ...
                else
                    dp[i][j] = 最值(...)
            }
        }

这种思路运用相对更多一些，尤其是涉及两个字符串/数组的子序列。本思路中 dp 数组含义又分为「只涉及一个字符串」
    和「涉及两个字符串」两种情况。

2.1 涉及两个字符串/数组时（比如最长公共子序列），dp 数组的含义如下：

    在子数组arr1[0..i]和子数组arr2[0..j]中，我们要求的子序列（最长公共子序列）长度为dp[i][j]。

2.2 只涉及一个字符串/数组时（比如本文要讲的最长回文子序列），dp 数组的含义如下：

    在子数组array[i..j]中，我们要求的子序列（最长回文子序列）的长度为dp[i][j]。

*/