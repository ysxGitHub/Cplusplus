/*
根据 百度百科 ， 生命游戏 ，简称为 生命 ，是英国数学家约翰·何顿·康威在 1970 年发明的细胞自动机。

给定一个包含 m × n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞都具有一个初始状态： 1 即为 活细胞 （live），或 0 即为 死细胞 （dead）。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：

如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；
如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；
如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；
如果死细胞周围正好有三个活细胞，则该位置死细胞复活；
下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。给你 m x n 网格面板 board 的当前状态，返回下一个状态。
*/

void gameOfLife(vector<vector<int>>& board) {
    int m = board.size(), n = board[0].size();
    pair<int, int> directions[8] = {{1, 0}, {-1, 0}, {1, 1}, {-1, 1}, {1, -1}, {-1, -1}, {0, 1}, {0, -1}};
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            int dead = 0, alive = 0;
            // 遍历当前细胞的八个方位的细胞，记录周围的细胞的 死亡 和 存活的个数
            for (const auto& dir : directions) {
                int x = dir.first + i, y = dir.second + j;
                // 当前点的状态：存活：1，3；死亡：0， 2
                if (x >= 0 && y >= 0 && x < m && y < n) {
                    (1 == board[x][y] || 3 == board[x][y]) ? ++alive : ++dead;
                }
            }
            // 四个规则中，只需要考虑其中三种会使当前细胞改变状态的规则
            // 当前格子的初始状态为 0 或者 1 若细胞需要改变状态，0 → 2， 1 → 3
            if ((1 == board[i][j]) && (alive < 2 || alive > 3)) {
                board[i][j] = 3; // 1->3由活到死
            }
            else if ((0 == board[i][j] || 2 == board[i][j]) && 3 == alive) {
                board[i][j] = 2; // 0->2 由死到活
            }
        }
    }
    // 一次性更新所有的细胞状态, 2表示活， 3表示死
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            if (board[i][j] > 1) {
                board[i][j] = 2 == board[i][j] ? 1 : 0;
            }
        }
    }
}
