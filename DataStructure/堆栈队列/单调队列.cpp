/*
求每个固定长度区间最值

顾名思义,单调队列即是一个单调的队列.

给定数列：{3, 1, 5, 7, 4, 2, 1}，现在要维护 区间长度为 3 的最大值。

操作序号	操作	      队列中元素	指定区间最大值
①	     3入队		      3         区间大小不符合
②	     1入队		      3,1       区间大小不符合
③	     3, 1出队，5入队   5		 [1,3]区间的最大值为5 
④	     5出队，7入队	   7         [2,4]区间的最大值为7 
⑤	     4入队		      7,4       [3,5]区间的最大值为7 
⑥	     2入队		      7,4,2     [4,6]区间的最大值为7 
⑦	     1入队，7出队	   4,2,1     [5,7]区间的最大值为4 

实现单调队列，主要分为三个部分：

去尾操作 ：队尾元素出队列。当队列有新元素待入队，需要从队尾开始，删除影响队列单调性的元素，维护队列的单调性。
    (删除一个队尾元素后，就重新判断新的队尾元素)
去尾操作结束后，将该新元素入队列。

删头操作 ：队头元素出队列。判断队头元素是否在待求解的区间之内，如果不在，就将其删除。
    （这个很好理解呀，因为单调队列的队头元素就是待求解区间的极值）

取解操作 ：经过上面两个操作，取出 队列的头元素 ，就是 当前区间的极值 

*/

// 假设有 n 个元素的序列，要求解的是长度为 k 的区间的最大值
// 队列que是STL的双向队列deque
// 队列存放的是元素在序列中的序号
#include<iostream>
#include<vector>
#include<deque>

using namespace std;

vector<int>a;
deque<int>que;// 双向队列
for(int i=1;i<=n;i++)
{
    while(!que.empty() && a[que.back()]<a[i])
    {
        que.pop_back();// 去尾操作
    }
    que.push_back(i);// 新元素(的序号) 入队列
    if(i>=k)// 这个很明显
    {
        while(!que.empty() && que.front()<i-k+1)
        {
            que.pop_front();// 删头操作 
        }
        cout<<a[que.front()]<<" ";// 取解操作
    }
}

