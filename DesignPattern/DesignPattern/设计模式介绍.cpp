/*
面向对象设计原则
1). 依赖倒置原则（DIP）
    高层模块（稳定）不应该依赖于底层模块（变化），二者都应该依赖于抽象（稳定）
    抽象（稳定）不应该依赖于实现细节（变化），实现细节应该依赖于抽象（稳定）。
2). 开放封闭原则（OCP）
    对扩展开发，对更改封闭
    类模块应该是可扩展的，但是不可修改。
3). 单一职责原则（SRP）
    一个类应该仅有一个引起它变化的原因
    变化的方向隐含着类的责任。
4). Liskov 替换原则（LSP）
    之类必须能够替换他们的基类（IS-A）。
    继承表达类型抽象。
5). 接口隔离原则（ISP）
    不应该强迫客户程序依赖他们不用的方法
    接口应该小而完备。
6). 优先使用对象组合，而不是类继承
7). 封装变化点（）
8). 针对接口编程，而不是针对实现编程。

在什么时候、什么地方使用设计模式 更重要
*/ 




